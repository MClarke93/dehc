##########################################################################
## INSTALLATION ##########################################################
##########################################################################

To install the application, do the following:

1. Install the latest CouchDB (http://couchdb.apache.org/#download) and
   Python 3.9 (https://www.python.org/downloads/release/python-397/). You
   must use Python 3.9, not 3.10 or newer.

2. Clone the dehc repository (https://github.com/MClarke93/dehc). This can
   be done one of two ways:
	 i. Click the green 'Code' button, then "Download ZIP". Extract
	    the zip where you want the code to be.
	ii. By running...
	    > git clone https://github.com/MClarke93/dehc
	    ...using either Git Bash or a version control program

3. Open the dehc folder in a terminal or command line program and install
   the required Python packages. For Windows, use...
   > pip install -r requirements_win.txt
   For Linux, use...
   > pip install -r requirements.txt

4. In the dehc folder, open "db_auth.json" and change the values for
   "user", "pass" and "url" to be the username and password used to
   access your CouchDB database of choice, and the server address of that
   database, respectively.

5. If the database is completely empty, the program won't start, so
   prepopulate it using...
   > py data_gen.py

6. Test the program works by running...
   > py main.py


##########################################################################
## SCRIPTS ###############################################################
##########################################################################

To use the DEHC application and all of its functions, start by navigating
your a terminal to the root folder of the dehc project. If you cloned your
repository to "C:\dev", then that would be "C:\dev\dehc". From there, you
may use any of the following commands.

Many of these support command line arguments. To see a list of all
arguments they support and what they do, add "-h" to the end of the
command, e.g.: > py main.py -h 

--------------------------------------------------------------------------

> py main.py

Starts the DEHC application and opens one of the application screens. By
default it opens the Evacuation Management Screen (EMS), however two other
screens are also available: Gate Check (GC) and Timetable (TT).

> py dehc-cli.py

Used to perform some short, command-line only administration operations,
such as generating a list of all orphaned database items.

> py data_gen.py

Used to populate the CouchDB with dummy data, including the Evacuation
itself, various Stations, some Lanes, and optionally some randomly
generated people and vessels.

> py data_export.py

Exports the contents of the CouchDB database to a series of csv files. By
default, this creates a new \csv folder to put the files into. The script
will error if this folder already exists, intentionally, to prevent
accidentally overwriting a previous export.

> py data_import.py

Imports the contents of the CouchDB database from a series of csv files.
By default, it looks for them inside of a \csv folder. The format of the 
csv files must match that generated by "data_export.py".

> py data_export_full.py

Exports the contents of the CouchDB database to a tree of folders,
containing .json, .txt, .jpg and .odt files fully describing each item
and their relationships. This serves as a human-readable "export database
to files" function. By default, this creates a new \export folder to put
the files into. The script will error if this folder already exists,
intentionally, to prefvent accidentally overwriting a previous export.

> py test.py

Tests the speed of the database by performing many reads and queries, 
printing the result to the terminal.

> py ServerTimeUpdater.py

A service script designed to be run in the background on the machine the
main CouchDB database is hosted on. It periodically updates a 'timecheck'
file on the database, which is used to track 'Server Time'.

> py webservices.py

Another service script designed to run in the background on the machine
the main CouchDB database is hosted on. This one acts as a web server,
providing online versions of ID Scanning, Gate Check, Manifesting, etc.

> py monitoring.py

Another service script designed to run in the background on the machine
the main CouchDB datbase is hosted one. This one reads data from the
database, interprets it, and makes it visible in Graphana.

--------------------------------------------------------------------------

Other .py files, such as __init__.py and the various .py files within
folders are not designed to be run directly. The sole exception is
"\util\P2MP replication setup\P2MP.py", which is discussed later.


##########################################################################
## FILES AND FOLDERS #####################################################
##########################################################################

The following folders are ONLY used by the program as part of running its
code, so humans users DO NOT need to pay attention to them:
 \apps
 \assets
 \certs
 \data
 \mods
 \resources

However the following folders may be relevent to the user:
 \logs
 \templates
 \util
 \csv             (if present)
 \export          (if present)

Additionally, the following files may be relevent to the user:
 admin_guide.txt
 bookmarks.json
 db_auth.json
 db_schema.json
 requirements.txt
 orphans.txt      (if present)

--------------------------------------------------------------------------

\logs

Every time the application runs, it generates a log file describing
everything that happened during that session. Those log files are stored
in this folder. The name of the log is the time that session was started.
Although they are ".log" files, they can be safely opened using a simple
text editor such as Notepad.

\templates

A series of templates used to structure the .odt files created during a
"full export" using data_export_full.py. These may be edited, with
caution, to change how the produced .odt files look.

\util\P2MP replication setup

Contains a script, designed to be run directly, which configures the
CouchDB database to share its data (replicate) with another CouchDB
database.

\csv and \export

Folders created or used by data_import.py, data_export.py and
data_export_full.py. Running _export and _export_full will create a \csv
and \export respectively.

--------------------------------------------------------------------------

admin_guide.txt

This guide! You're already reading it.

bookmarks.json

A .json which defines the bookmark buttons at the top of the EMS screen.
Changing the bookmarks while the program is running will automatically
update this file.

db_auth.json

A .json which defines the credentials that are used to connect to the
CouchDB database. must have a username and password, as well as an address
to the database's server.

db_schema.json

A .json which fully defines the database 'schema', that is, what the
different kinds of items are, what fields those items have, how those
fields behave in the application, and data validation for those fields.
Normally this would be fully editable, and many aspects of it still are,
however some features of the application are 'hard coded' and expect
certain things to be certain names, so take care when editing this.

requirements.txt

A text file with a list of Python packages that are required to make the
application work. When you 'install' the application, one of the steps
is to have Pip (Python's package manager) read this file and install each
of the things it contains.

orphans.txt      (if present)

When using dehc-cli.py to generate a list of orphaned database items, the
list is output to this file.

--------------------------------------------------------------------------

The files .gitignore and README.md are mainly used by Git/Github and can
be ignored by users of the program. Developers will know what they are.


##########################################################################
## COMMON USE CASES ######################################################
##########################################################################

-- STARTING THE EMS APPLICATION ------------------------------------------

Normal mode:
* In terminal:
  > py main.py

Admin mode:
* In terminal:
  > py main.py -g

Read-only mode:
* In terminal:
  > py main.py -r


-- STARTING THE GC APPLICATION -------------------------------------------

* Remember, any persons going through gatecheck should already have the
  "Unboarded" flag set. You can do this en mass by starting EMS in admin
  mode (see above), selecting the vessel, clicking 'Admin', then choosing
  to apply the flag to everything inside.
* In terminal:
  > py main.py GC Vessel/xxxxxxxx
  ...where "Vessel/xxxxxxxx" is the uuid of the vessel you want to board


-- STARTING THE TT APPLICATION -------------------------------------------

* In terminal:
  > py main.py TT Station/xxxxxxxx
  ...where "Station/xxxxxxxx" is the uuid of a container; the timetable
  will cycle through Vessels inside of that container only.


-- STARTING AN APP USING A DIFFERENT COUCHDB DATABASE --------------------

If you've already set up replication to your local database:
* In terminal
  > py main.py -n namespace
  ...where "namespace" is the database's namespace. If omitted, the
  namespace is "dehc".

Option 1 for using a remote database directly (no replication):
* Modify db_auth.json to use the new server's user, pass, url.
* In terminal:
  > py main.py -n namespace
  ...where "namespace" is the database's namespace. If omitted, the
  namespace is "dehc".

Option 2 for using a remote database directly (no replication):
* Create a new .json file containing the new server's user, pass and url.
* In terminal:
  > py main.py -a new_auth.json -n namespace
  ...where "new_auth.json" is the name of .json you created and
  "namespace" is the database's namespace.

E.g. Using VPS, after replication has been set up:
* Ensure OpenVPN is running and connected (so replication works)
* In terminal:
  > py main.py -n vps

Connecting directly to VPS (no replication):
* Ensure OpenVPN is running and connected
* In terminal:
  > py main.py -a db_auth_vps_server.json -n vps

Adding -a and/or -n as shown above works the same for GC and TT.


-- POPULATING THE DATABASE -----------------------------------------------

From scratch:
* In terminal:
  > py data_gen.py P V
  ...where "P" and "V" are integers; the number of people to create and
  the number of vessels to create, respectively. Leaving these out creates
  0 people and 0 vessels, but still creates the evacuations/stations.

From csv files:
* Have all of the csv files inside of a folder called "csv"
* In terminal:
  > py data_import.py


-- EXPORTING THE DATABASE ------------------------------------------------

To csv files:
* Ensure there is no existing folder called 'csv'. If so, remove it.
* In terminal:
  > py data_export.py
* The resulting export will be found inside of "\csv"

To documents:
* Ensure there is no existing folder called 'export'. If so, remove it.
* In terminal:
  > py data_export_full.py
* The resulting export will be found inside of "\export"


-- UPDATING THE SCHEMA ---------------------------------------------------

Pushing a modified schema to the database:
* In terminal
  > py main.py -f -u -x

To push to vps, append "-a db_auth_vps_server.json -n vps" as described
further above


-- FINDING ORPHANS -------------------------------------------------------

* In terminal:
  > py dehc-cli orphan
* This creates a new file orphans.txt, containing a list of orphaned UUIDs
* Search these IDs in the EMS app using the "_id" field to recover them